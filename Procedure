USE PEDIDOS
-- LISTA 01
-- EXERCÍCIO A
CREATE PROCEDURE atualizar_salarios
    @codigo INT
AS
BEGIN
    SET NOCOUNT ON;

    IF @codigo = 2
    BEGIN
        UPDATE cod_vendedor
        SET salario_fixo = salario_fixo * 1.2
        WHERE faixa_comissao = 'B';
    END
    ELSE IF @codigo = 3
    BEGIN
        UPDATE cod_vendedor
        SET salario_fixo = salario_fixo * 1.3
        WHERE faixa_comissao = 'B';
    END
    ELSE IF @codigo = 4
    BEGIN
        UPDATE cod_vendedor
        SET salario_fixo = salario_fixo * 1.4
        WHERE faixa_comissao = 'B';
    END

    SELECT *
    FROM dbo.vendedor;
END

EXEC atualizar_salarios_vendedores @codigo = 2;

--EXERCÍCIO B
CREATE PROCEDURE listar_classificacao
    @codigo_produto INT
AS
BEGIN
    SET NOCOUNT ON;

    SELECT cod_produto, descricao, valor_unitario,
        CASE
            WHEN valor_unitario < 2 THEN 'Baixo'
            WHEN valor_unitario BETWEEN 2 AND 10 THEN 'Moderado'
            WHEN valor_unitario > 10 THEN 'Caro'
        END AS classificacao
    FROM produto
    WHERE cod_produto = @codigo_produto;
END

EXEC listar_classificacao @codigo_produto = 5;

--EXERCÍCIO C
CREATE PROCEDURE atualizar_valor_unitario
    @codigo_produto INT,
    @taxa_aumento DECIMAL(10, 2)
AS
BEGIN
    SET NOCOUNT ON;

    -- Listar dados do produto no início da procedure
    SELECT cod_produto, descricao, valor_unitario
    FROM produto
    WHERE cod_produto = @codigo_produto;

    -- Atualizar valor unitário do produto
    UPDATE produto
    SET valor_unitario = valor_unitario * (1 + @taxa_aumento)
    WHERE cod_produto = @codigo_produto;

    -- Listar dados do produto após a atualização
    SELECT cod_produto, descricao, valor_unitario
    FROM produto
    WHERE cod_produto = @codigo_produto;
END

EXEC atualizar_valor_unitario @codigo_produto = 5, @taxa_aumento = 0.2;

--EXERCÍCIO D
CREATE PROCEDURE obter_valor_total_venda
    @codigo_vendedor INT
AS
BEGIN
    SET NOCOUNT ON;

    -- Verificar se o código do vendedor existe na tabela vendedor
    IF NOT EXISTS (SELECT 1 FROM vendedor WHERE cod_vendedor = @codigo_vendedor)
    BEGIN
        PRINT 'O código do vendedor não existe na tabela vendedor.';
        RETURN;
    END;

    -- Verificar se o código do vendedor existe na tabela de pedidos
    IF NOT EXISTS (SELECT 1 FROM pedido WHERE cod_vendedor = @codigo_vendedor)
    BEGIN
        PRINT 'O código do vendedor não existe na tabela de pedidos.';
        RETURN;
    END;

    -- Calcular o valor total de vendas do vendedor
    DECLARE @valor_total_vendas DECIMAL(10, 2);

    SELECT @valor_total_vendas = SUM(Valor_unitario)
    FROM pedido.dbo.produto
    WHERE cod_vendedor = @codigo_vendedor;

    -- Exibir o valor total de vendas do vendedor
    PRINT 'O valor total de vendas do vendedor é: ' + CONVERT(VARCHAR(20), @valor_total_vendas);
END

EXEC obter_valor_total_vendas @codigo_vendedor = 4;

--LISTA 02

--EXERCÍCIO A
CREATE TABLE regiao(
    cod_regiao INT PRIMARY KEY,
    nome_regiao VARCHAR(15)
)

--EXERCÍCIO B
CREATE TABLE departamento(
    cod_departamento INT IDENTITY PRIMARY KEY,
    nome_departamento VARCHAR(20),
    cod_regiao INT,
    FOREIGN KEY (cod_regiao) REFERENCES dbo.regiao(cod_regiao)
)

--EXERCÍCIO 1
REATE PROCEDURE inserir_regiao
    @nome_regiao VARCHAR(15)
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRANSACTION;

    -- Inserir nova região
    INSERT INTO regiao (Nome_regiao)
    VALUES (@nome_regiao);

    -- Verificar o resultado da inserção
    IF @@ERROR <> 0
    BEGIN
        ROLLBACK;
        PRINT 'Erro ao inserir nova região. Transação revertida.';
    END
    ELSE
    BEGIN
        COMMIT;
        PRINT 'Nova região inserida com sucesso. Transação efetivada.';
    END;
END

EXEC inserir_regiao @nome_regiao = 'Bali';

--EXERCÍCIO 2
CREATE PROCEDURE inserir_departamento
    @nome_departamento VARCHAR(50)
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRANSACTION;

    -- Inserir novo departamento com região nula
    INSERT INTO departamento (Nome_departamento, Cod_regiao)
    VALUES (@nome_departamento, NULL);

    -- Verificar o resultado da inserção
    IF @@ERROR <> 0
    BEGIN
        ROLLBACK;
        PRINT 'Erro ao inserir novo departamento. Transação revertida.';
    END
    ELSE
    BEGIN
        COMMIT;
        PRINT 'Novo departamento inserido com sucesso. Transação efetivada.';
    END;
END

EXEC inserir_departamento @nome_departamento = 'Novo Departamento';

--EXERCÍCIO 3
CREATE PROCEDURE alterar_codigo_regiao_departamento
    @codigo_departamento INT,
    @nome_regiao VARCHAR(15)
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRANSACTION;

    -- Obter o código da região a partir do nome da região
    DECLARE @codigo_regiao INT;

    SELECT @codigo_regiao = Cod_regiao
    FROM regiao
    WHERE Nome_regiao = @nome_regiao;

    -- Verificar se o nome da região existe na tabela região
    IF @codigo_regiao IS NULL
    BEGIN
        PRINT 'O nome da região não existe na tabela região.';
        RETURN;
    END;

    -- Verificar se o nome da região está duplicado na tabela região
    IF @@ROWCOUNT > 1
    BEGIN
        PRINT 'O nome da região está duplicado na tabela região.';
        RETURN;
    END;

    -- Alterar o código da região na tabela departamento
    UPDATE departamento
    SET Cod_regiao = @codigo_regiao
    WHERE Cod_departamento = @codigo_departamento;

    -- Verificar o resultado da alteração
    IF @@ERROR <> 0
    BEGIN
        ROLLBACK;
        PRINT 'Algum erro ocorreu ao alterar o código da região do departamento. Transação revertida.';
    END
    ELSE
    BEGIN
        COMMIT;
        PRINT 'Código da região do departamento alterado com sucesso. Transação efetivada.';
    END;
END

EXEC alterar_codigo_regiao
